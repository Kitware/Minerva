.m-postgres-modal.modal-dialog
  .modal-content
    form#m-postgres.modal-form(role="form")
      .modal-header
        button.close(data-dismiss="modal", aria-hidden="true", type="button") &times;
        h4.modal-title
          | Create Dataset from Database
      .modal-body
        .form-group.form-group-sm(class=validation.datasetNameRequired?"has-error":'')
          label.control-label.full-width(for="m-postgres-dataset-name") Custom Dataset name
            input#m-postgres-dataset-name.form-control(type='text', value=datasetName)
            if validation.datasetNameRequired
              span.help-block Required
        .form-group.form-group-sm
          label.control-label.full-width(for="m-postgres-source") Assetstore
            select#m-postgres-assetstore.form-control
              option
              each assetstore in assetstores
                option(value=assetstore._id, selected=assetstore._id==selectedAssetstoreId)= assetstore.name
        if sources.length
          .form-group.form-group-sm
            label.control-label.full-width(for="m-postgres-source") Source
              select#m-postgres-source.form-control
                option
                each source in sources
                  option(value=source, selected=source==selectedSource)= source
        if columns.length
          label Value
          .row.indented
            .col-sm-6
              .form-group.form-group-sm(class=validation.valueFieldRequired?"has-error":'')
                label.control-label.full-width(for="m-postgres-field") Column
                  select#m-postgres-field.form-control.has-min-width
                    option
                    each column in primativeColumns()
                      option(value=column.name, selected=column.name==valueField)= column.name
                  if validation.valueFieldRequired
                    span.help-block Required
            .col-sm-6
              if valueField && selectedSource && columns.length
                .form-group.form-group-sm
                  label.control-label.full-width(for="m-postgres-aggregation") Aggregate method
                    select#m-postgres-aggregation.form-control.has-min-width
                      each func in getAvailableAggregateFunctions()
                        option(value=func, selected=aggregateFunction==func)= func
        if valueField
          label Geometry
          .row.indented
            .col-xs-6
              .form-group.form-group-sm
                label.control-label.full-width(for="m-postgres-source") Type
                  select.form-control.geometry-field-type
                    option(value='link', selected=geometryFieldType=='link') Link
                    option(value='built-in', selected=geometryFieldType=='built-in') Built-in
            .col-xs-6
              if geometryFieldType==='built-in'
                .form-group.form-group-sm(class=validation.geometryBuiltInFieldRequired?"has-error":'')
                  label.control-label.full-width(for="m-postgres-field") Field
                    select#geometry-built-in-field.form-control.input-sm.has-min-width
                      option
                      each column in geometryColumns()
                        option(value=column.name, selected=column.name==geometryBuiltInField)= column.name
                    if validation.geometryBuiltInFieldRequired
                      span.help-block Required
              if geometryFieldType==='link'
                .form-group.form-group-sm(class=validation.geometryLinkTargetRequired?"has-error":'')
                  label.control-label.full-width(for="m-postgres-field") Target
                    select.form-control.input-sm.has-min-width.link-target
                      option
                      each target in geometryLink.targets
                        option(value=target._id, selected=geometryLink.target==target)= target.name
                    if validation.geometryLinkTargetRequired
                      span.help-block Required
        if geometryLink.target
          .row.indented
            .col-xs-12.links-container
              label Links
              button.btn.btn-xs.btn-success.add-link(type="button")
                i.icon-plus
              .links
                each link, index in geometryLink.links
                  .link
                    select.form-control.input-sm.link-field(data-link-index=index)
                      option(value='')= '--Target--'
                      each field in geometryLink.fields
                        option(value=field, selected=link.field==field)= field
                    if link.field
                      select.form-control.input-sm.link-operator(data-link-index=index)
                        option
                        each operator in geometryLink.operators
                          option(value=operator, selected=link.operator==operator)= operator
                      if link.operator==='='
                        select.form-control.input-sm.link-value(data-link-index=index)
                          option(value='')= '--Source--'
                          each column in columns
                            option(value=column.name, selected=link.value==column.name)= column.name
                      if link.operator==='constant'
                        input.form-control.input-sm.link-value(type="text", value=link.value, data-link-index=index)
                    button.btn.btn-xs.btn-danger.remove-link(type="button", data-link-index=index)
                      i.icon-cancel
                if validation.geometryLinksRequired
                  .has-error
                    .span.help-block Required
                if validation.geometryLinksInvalid
                  .has-error
                    .span.help-block Invalid
        .m-query-builder
      .modal-footer
        .metadata-container.text-info
          if metadataPending
            | Querying result metadata...
          if metadata
            div Record count: #{metadata.recordCount}
            div
              - var arr = [`Total: ${metadata.recordCountInTable}`, `After filter: ${metadata.recordCountAfterFilter}`, `After aggregation: ${metadata.recordCountAfterAggregation}`];
              - if(metadata.recordCountAfterGeometryLinking !== null){
              -   arr.push(`After geometry linking: ${metadata.recordCountAfterGeometryLinking}`)
              - }
              - var output = arr.join(',&nbsp;&nbsp;')
              | (!{output})
        a.btn.btn-small.btn-default(data-dismiss="modal") Cancel
        button#result-metadata.btn.btn-small.btn-primary(disabled=!columns.length || metadataPending, type="button")
          i.icon-search
          | Metadata
        button#create-dataset.btn.btn-small.btn-primary(disabled=!columns.length || !metadata || metadata.recordCount===0, title= !metadata ? 'Query result metadata first' : '')
          i.icon-plus-squared
          | Dataset
